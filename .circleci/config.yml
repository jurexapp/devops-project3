version: 2.1

orbs:
  slack: circleci/slack@4.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            success_migration=$(curl --insecure https://kvdb.io/HqfEAztpuJ4xoxeFY2khCR/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if ((success_migrations == 1));
            then
              cd  ~/project/backend
              npm install
              npm run migrations:revert
            fi
          when: on_fail
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: install front-end dependencies
          command: |
            # Your code here
            cd frontend
            npm  install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: cimg/node:18.7.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend 
            sudo npm install -g npm
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test-frontend
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      # Checkout code from git
      # Restore from cache
      # Your job code here
      # not understanding why it fails without npm install TODO

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test-backend
          command: |
            cd backend
            npm run test
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan-frontend
          command: |
            cd frontend
            npm install 
            npm audit fix --audit-level=critical --force
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: scan-backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=BUILD${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1 \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=front-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            cd .circleci/ansible
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["35:27:2b:8b:f9:ad:39:95:81:9b:43:cc:7f:67:e6:d9"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            pip install awscli
            apk add --update ansible
          # cat ~/project/.cicleci/ansible/configure-server.yml
      - run:
          name: Run Playbook and Configure server
          command: |
            export  ANSIBLE_HOST_KEY_CHECKING=false
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml \
        # --private-key
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:18.7.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            echo ENVIRONMENT=production >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            sudo npm install -g npm
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrtions_dump.txt
            then
              curl https://kvdb.io/HqfEAztpuJ4xoxeFY2khCR/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      # Here's where you will add some code to rollback on failure

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      # - attach_workspace:
      #     at: ~/
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar gzip
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            cat .env
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["35:27:2b:8b:f9:ad:39:95:81:9b:43:cc:7f:67:e6:d9"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible curl rsync openssh nodejs npm
            pip install awscli
            aws --version
            ansible --version
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            echo ENVIRONMENT=production >> ".env"
            echo NODE_ENV=local >> ".env"        # production
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            cat .env
            npm install
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mkdir .circleci/ansible/roles/deploy/files
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "inventory.txt file IPs are"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url and smoke test
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
                              --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                              --query 'Reservations[*].Instances[*].PublicIpAddress' \
                              --output text)
             echo "${BACKEND_IP}"
             if curl "http://${BACKEND_IP}:3030/api/status" | grep "ok"
             then
               return 0
             else
               return 1
             fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
             URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                return 0
              else
                return 1
              fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      # Checkout code from git
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      # Here's where you will add some code to rollback on failure

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo  OldWorkflowID:  "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names= "${STACKS[@]}"

      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi

workflows:
  default:
    jobs:
      - build-frontend:
          context: slack-messaging
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master, test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
